basePath: /api
definitions:
  accounting.BudgetUtilization:
    properties:
      days_until_refresh:
        type: integer
      remaining_budget:
        type: number
      total_budget:
        type: number
      used_budget:
        type: number
      utilization_rate:
        type: number
    type: object
  accounting.CashFlow:
    properties:
      amount:
        type: number
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: integer
      referenceNumber:
        type: string
      tenantID:
        type: integer
      transactionCategoryID:
        type: integer
      transactionDate:
        type: string
      type:
        description: income or expense
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
    type: object
  accounting.CategorySummary:
    properties:
      amount:
        type: number
      category_id:
        type: integer
      category_name:
        type: string
      percentage:
        type: number
    type: object
  accounting.CategoryTrendMetrics:
    properties:
      category_id:
        type: integer
      category_name:
        type: string
      growth_rate:
        type: number
      last_month:
        type: number
      this_month:
        type: number
    type: object
  accounting.MonthlyExpenditure:
    properties:
      amount:
        type: number
      month:
        description: YYYY-MM format
        type: string
      requests:
        type: integer
    type: object
  accounting.PettyCash:
    properties:
      alertThreshold:
        type: number
      balanceUpdatedAt:
        type: string
      budgetLimit:
        type: number
      budgetPeriod:
        type: string
      channel:
        $ref: '#/definitions/channel.Channel'
      channelID:
        type: integer
      createdAt:
        type: string
      createdBy:
        type: string
      currentBalance:
        type: number
      division:
        $ref: '#/definitions/division.Division'
      divisionID:
        type: integer
      id:
        type: integer
      initialBalance:
        type: number
      office:
        $ref: '#/definitions/office.Office'
      officeID:
        type: integer
      periodEndDate:
        type: string
      periodStartDate:
        type: string
      status:
        type: string
      tenantID:
        type: integer
      updatedAt:
        type: string
      updatedBy:
        type: string
    type: object
  accounting.PettyCashRequest:
    properties:
      amount:
        type: number
      approvedAt:
        type: string
      approvedBy:
        type: string
      budgetCode:
        type: string
      categoryID:
        type: integer
      channel:
        $ref: '#/definitions/channel.Channel'
      channelID:
        type: integer
      completedAt:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      division:
        $ref: '#/definitions/division.Division'
      divisionID:
        type: integer
      employeeID:
        type: integer
      id:
        type: integer
      notes:
        type: string
      office:
        $ref: '#/definitions/office.Office'
      officeID:
        type: integer
      paymentMethod:
        type: string
      pettyCashID:
        type: integer
      purpose:
        type: string
      receiptURLs:
        items:
          type: string
        type: array
      referenceNumber:
        type: string
      reimbursementDate:
        type: string
      reimbursementStatus:
        type: string
      rejectionReason:
        type: string
      requestNumber:
        type: string
      settlementDate:
        type: string
      settlementStatus:
        type: string
      status:
        type: string
      tenantID:
        type: integer
      transactionCategory:
        $ref: '#/definitions/accounting.TransactionCategory'
      updatedAt:
        type: string
      updatedBy:
        type: string
    type: object
  accounting.PettyCashSummary:
    properties:
      budget_utilization:
        $ref: '#/definitions/accounting.BudgetUtilization'
      category_breakdown:
        items:
          $ref: '#/definitions/accounting.CategorySummary'
        type: array
      monthly_expenditures:
        items:
          $ref: '#/definitions/accounting.MonthlyExpenditure'
        type: array
      pending_requests:
        type: integer
      recent_transactions:
        items:
          $ref: '#/definitions/accounting.RecentTransaction'
        type: array
      top_expenses:
        items:
          $ref: '#/definitions/accounting.TopExpense'
        type: array
      total_balance:
        type: number
      total_expenditure:
        type: number
      trend_analysis:
        $ref: '#/definitions/accounting.TrendAnalysis'
    type: object
  accounting.PurchaseOrder:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/accounting.PurchaseOrderItem'
        type: array
      notes:
        type: string
      orderDate:
        type: string
      ponumber:
        type: string
      status:
        description: draft, submitted, approved, rejected, completed
        type: string
      supplierID:
        type: integer
      tenantID:
        type: integer
      totalAmount:
        type: number
      updatedAt:
        type: string
      updatedBy:
        type: string
    type: object
  accounting.PurchaseOrderItem:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      id:
        type: integer
      itemID:
        type: integer
      purchaseOrderID:
        type: integer
      quantity:
        type: integer
      tenantID:
        type: integer
      totalPrice:
        type: number
      unitPrice:
        type: number
      updatedAt:
        type: string
      updatedBy:
        type: string
    type: object
  accounting.RecentTransaction:
    properties:
      amount:
        type: number
      date:
        type: string
      employee_name:
        type: string
      id:
        type: integer
      purpose:
        type: string
      request_number:
        type: string
      status:
        type: string
    type: object
  accounting.TopExpense:
    properties:
      amount:
        type: number
      category_name:
        type: string
      date:
        type: string
      employee_name:
        type: string
      purpose:
        type: string
      request_number:
        type: string
    type: object
  accounting.TransactionCategory:
    properties:
      code:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      name:
        type: string
      tenantID:
        type: integer
      type:
        description: income or expense
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
    type: object
  accounting.TrendAnalysis:
    properties:
      category_trend:
        items:
          $ref: '#/definitions/accounting.CategoryTrendMetrics'
        type: array
      daily_average:
        type: number
      growth_rate:
        type: number
      monthly_average:
        type: number
      weekly_average:
        type: number
      weekly_trend:
        items:
          $ref: '#/definitions/accounting.WeeklyExpenditures'
        type: array
    type: object
  accounting.WeeklyExpenditures:
    properties:
      request_count:
        type: integer
      total_amount:
        type: number
      week_end:
        type: string
      week_start:
        type: string
    type: object
  backup.Backup:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      file_name:
        type: string
      id:
        type: integer
      size:
        type: integer
      tenant_id:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  channel.Channel:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      tenant_id:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  division.Division:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      employees:
        items:
          $ref: '#/definitions/employee.Employee'
        type: array
      id:
        type: integer
      name:
        type: string
      tenant_id:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  employee.Employee:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      division_id:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      tenant_id:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  handlers.AssignMenusRequest:
    type: object
  handlers.AssignOfficesRequest:
    properties:
      office_ids:
        items:
          type: integer
        type: array
    required:
    - office_ids
    type: object
  handlers.AssignPermissionsRequest:
    description: Assign permissions request model
    properties:
      permission_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - permission_ids
    type: object
  handlers.AssignZoneRequest:
    properties:
      zone_id:
        example: 1
        type: integer
    required:
    - zone_id
    type: object
  handlers.AssignZonesRequest:
    type: object
  handlers.AuditResponse:
    description: Audit trail entry response model
    properties:
      action:
        example: create
        type: string
      created_at:
        example: "2024-01-01 12:00:00"
        type: string
      created_by:
        example: john.doe@example.com
        type: string
      entity_id:
        example: 123
        type: integer
      entity_type:
        example: user
        type: string
      id:
        example: 1
        type: integer
      new_values: {}
      old_values: {}
      tenant_id:
        example: 1
        type: integer
    type: object
  handlers.CancelWorkOrderRequest:
    properties:
      reason:
        example: Customer cancelled the order
        type: string
    required:
    - reason
    type: object
  handlers.CashFlowResponse:
    description: Cash flow response model
    properties:
      amount:
        example: 1000
        type: number
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Sales revenue
        type: string
      id:
        example: 1
        type: integer
      reference_number:
        example: TRX-2024-001
        type: string
      transaction_category:
        $ref: '#/definitions/handlers.TransactionCategoryResponse'
      transaction_date:
        example: "2024-04-01T00:00:00Z"
        type: string
      type:
        example: income
        type: string
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.CategoryInfo:
    properties:
      code:
        example: SOCCER
        type: string
      description:
        example: Soccer team jerseys and uniforms
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Soccer Jersey
        type: string
    type: object
  handlers.CompleteWorkOrderRequest:
    properties:
      actual_cost:
        example: 950
        type: number
      completion_notes:
        example: Work completed successfully
        type: string
    required:
    - actual_cost
    - completion_notes
    type: object
  handlers.CreateDivisionRequest:
    description: Create division request model
    properties:
      description:
        example: Administration department
        type: string
      name:
        example: ADMIN
        type: string
    required:
    - name
    type: object
  handlers.CreateEmployeeRequest:
    description: Create employee request model
    properties:
      DivisionID:
        example: 1
        type: integer
      email:
        example: alice.johnson@email.com
        type: string
      name:
        example: Alice Johnson
        type: string
      phone:
        example: 123-456-7890
        type: string
    required:
    - DivisionID
    - email
    - name
    type: object
  handlers.CreateItemRequest:
    properties:
      code:
        example: ITM001
        type: string
      description:
        example: Test item description
        type: string
      is_active:
        example: true
        type: boolean
      max_stock:
        example: 100
        type: integer
      min_stock:
        example: 10
        type: integer
      name:
        example: Test Item
        type: string
      unit:
        example: PCS
        type: string
    required:
    - code
    - name
    - unit
    type: object
  handlers.CreateMenuRequest:
    description: Create menu request model
    properties:
      icon:
        example: ni ni-chart-bar-32
        type: string
      name:
        example: Dashboard
        type: string
      parent_id:
        example: 0
        type: integer
      sort:
        example: 1
        type: integer
      url:
        example: /dashboard
        type: string
    required:
    - name
    type: object
  handlers.CreateOfficeRequest:
    description: Create office request model
    properties:
      address:
        example: 123 Main St
        type: string
      code:
        example: MO001
        type: string
      email:
        example: main@office.com
        type: string
      name:
        example: Main Office
        type: string
      phone:
        example: "+1234567890"
        type: string
      zone_id:
        example: 1
        type: integer
    required:
    - code
    - email
    - name
    type: object
  handlers.CreateOrderRequest:
    description: Create order request model
    properties:
      customer_email:
        example: john.doe@example.com
        type: string
      customer_name:
        example: John Doe
        type: string
      customer_phone:
        example: 123-456-7890
        type: string
      delivery_address:
        example: 123 Main St
        type: string
      discount_amount:
        example: 10
        type: number
      expected_delivery_date:
        example: "2024-03-25"
        type: string
      notes:
        example: Please deliver in the morning
        type: string
      office_id:
        example: 1
        type: integer
      order_number:
        example: ORD-001
        type: string
      payment_status:
        example: unpaid
        type: string
      status:
        example: pending
        type: string
      subtotal:
        example: 100
        type: number
      total_amount:
        example: 90
        type: number
    required:
    - customer_email
    - customer_name
    - office_id
    - order_number
    - payment_status
    - status
    - subtotal
    - total_amount
    type: object
  handlers.CreatePaymentRequest:
    description: Create payment request model
    properties:
      amount:
        example: 100
        type: number
      notes:
        example: Payment received
        type: string
      order_id:
        example: 1
        type: integer
      payment_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      payment_method:
        example: credit_card
        type: string
      reference_number:
        example: PAY-001
        type: string
      status:
        example: completed
        type: string
    required:
    - amount
    - order_id
    - payment_method
    - reference_number
    - status
    type: object
  handlers.CreatePermissionRequest:
    description: Create permission request model
    properties:
      description:
        example: Permission to create new users
        type: string
      name:
        example: CREATE_USER
        type: string
    required:
    - name
    type: object
  handlers.CreateProductCategoryRequest:
    description: Create product category request model
    properties:
      code:
        example: SOCCER
        type: string
      description:
        example: Soccer team jerseys and uniforms
        type: string
      name:
        example: Soccer Jersey
        type: string
    required:
    - code
    - name
    type: object
  handlers.CreateProductRequest:
    description: Create product request model
    properties:
      base_price:
        example: 49.99
        minimum: 0
        type: number
      bulk_discount_rules:
        additionalProperties:
          type: integer
        example:
          "10": 5
          "20": 10
          "50": 15
        type: object
      category_id:
        example: 1
        type: integer
      code:
        example: PSJ001
        type: string
      color_options:
        example:
        - '["Red/White"'
        - ' "Blue/White"'
        - ' "Green/White"'
        - ' "Custom"]'
        items:
          type: string
        type: array
      customization_options:
        additionalProperties:
          type: boolean
        example:
          name: true
          number: true
          patches: true
          team_logo: true
        type: object
      description:
        example: Professional grade soccer jersey
        type: string
      material:
        example: Premium Polyester
        type: string
      min_order_quantity:
        example: 1
        minimum: 1
        type: integer
      name:
        example: Pro Soccer Jersey
        type: string
      production_time:
        example: 5
        type: integer
      size_available:
        example:
        - '["S"'
        - ' "M"'
        - ' "L"'
        - ' "XL"'
        - ' "XXL"]'
        items:
          type: string
        type: array
      weight:
        example: 180
        type: number
    required:
    - base_price
    - category_id
    - code
    - min_order_quantity
    - name
    type: object
  handlers.CreateRegionRequest:
    description: Create region request model
    properties:
      description:
        example: Northern region
        type: string
      name:
        example: North Region
        type: string
    required:
    - name
    type: object
  handlers.CreateRoleRequest:
    description: Create role request model
    properties:
      description:
        example: Administrator role with full access
        type: string
      name:
        example: Admin
        type: string
      permission_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  handlers.CreateStockMovementRequest:
    properties:
      item_id:
        example: 1
        type: integer
      movement_type:
        example: in
        type: string
      notes:
        example: Initial stock
        type: string
      quantity:
        example: 100
        type: integer
      reference_id:
        example: 1
        type: integer
      reference_type:
        example: purchase
        type: string
    required:
    - item_id
    - movement_type
    - quantity
    type: object
  handlers.CreateStockOpnameDetailRequest:
    properties:
      actual_qty:
        example: 95
        type: integer
      item_id:
        example: 1
        type: integer
      notes:
        example: Stock count mismatch
        type: string
      system_qty:
        example: 100
        type: integer
    required:
    - actual_qty
    - item_id
    - system_qty
    type: object
  handlers.CreateStockOpnameRequest:
    properties:
      notes:
        example: Monthly stock count
        type: string
      opname_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      opname_number:
        example: OPN/2024/001
        type: string
    required:
    - opname_date
    - opname_number
    type: object
  handlers.CreateSupplierRequest:
    description: Create supplier request model
    properties:
      address:
        example: 123 Textile Road, Fabric City
        type: string
      bank_account_name:
        example: Premium Fabrics Co.
        type: string
      bank_account_number:
        example: "1234567890"
        type: string
      bank_name:
        example: City Bank
        type: string
      code:
        example: SUP-001
        type: string
      contact_person:
        example: John Smith
        type: string
      email:
        example: john@premiumfabrics.com
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Premium Fabrics Co.
        type: string
      phone:
        example: +1-555-0123
        type: string
      tax_number:
        example: TAX123456
        type: string
    required:
    - code
    - email
    - name
    type: object
  handlers.CreateTaskRequest:
    description: Create task request model
    properties:
      completed_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      employee_id:
        example: 1
        type: integer
      notes:
        example: Handle with care
        type: string
      order_item_id:
        example: 1
        type: integer
      sequence_number:
        example: 1
        type: integer
      started_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      status:
        example: pending
        type: string
      task_type:
        example: washing
        type: string
    required:
    - order_item_id
    - sequence_number
    - status
    - task_type
    type: object
  handlers.CreateTransactionCategoryRequest:
    properties:
      code:
        example: INC-SALES
        type: string
      description:
        example: Income from sales
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Sales Income
        type: string
      type:
        example: income
        type: string
    required:
    - code
    - name
    - type
    type: object
  handlers.CreateUserRequest:
    description: Create user request model
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: securepassword123
        type: string
      role_id:
        example: 1
        type: integer
      username:
        example: john.doe
        type: string
    required:
    - email
    - password
    - role_id
    - username
    type: object
  handlers.CreateWorkOrderRequest:
    properties:
      assigned_to:
        example: 1
        type: integer
      customer_name:
        example: John Doe
        type: string
      description:
        example: Production of 100 jerseys
        type: string
      end_date:
        example: "2024-03-26T21:41:49Z"
        type: string
      estimated_cost:
        example: 1000
        type: number
      items:
        items:
          $ref: '#/definitions/handlers.WorkOrderItemInput'
        type: array
      order_id:
        example: 1
        type: integer
      start_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      tasks:
        items:
          $ref: '#/definitions/handlers.WorkOrderTaskInput'
        type: array
      work_type:
        example: production
        type: string
    required:
    - assigned_to
    - customer_name
    - description
    - end_date
    - estimated_cost
    - order_id
    - start_date
    - work_type
    type: object
  handlers.CreateZoneRequest:
    description: Create zone request model
    properties:
      description:
        example: Northern region zone
        type: string
      name:
        example: North Zone
        type: string
      region_id:
        example: 1
        type: integer
    required:
    - name
    type: object
  handlers.DivisionInfo:
    properties:
      description:
        example: Administration department
        type: string
      id:
        example: 1
        type: integer
      name:
        example: ADMIN
        type: string
    type: object
  handlers.DivisionResponse:
    description: Division response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Administration department
        type: string
      employees:
        items:
          $ref: '#/definitions/handlers.EmployeeInfo'
        type: array
      id:
        example: 1
        type: integer
      name:
        example: ADMIN
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.EmployeeInfo:
    properties:
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
    type: object
  handlers.EmployeeResponse:
    description: Employee response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      division:
        $ref: '#/definitions/handlers.DivisionInfo'
      division_id:
        example: 1
        type: integer
      email:
        example: alice.johnson@email.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Alice Johnson
        type: string
      phone:
        example: 123-456-7890
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.ErrorResponse:
    description: Standard error response model
    properties:
      error:
        example: Invalid request parameters
        type: string
    type: object
  handlers.ImageInfo:
    properties:
      id:
        example: 1
        type: integer
      image_url:
        example: /uploads/products/image.jpg
        type: string
      is_primary:
        example: true
        type: boolean
      product_id:
        example: 1
        type: integer
      sort_order:
        example: 1
        type: integer
    type: object
  handlers.ItemResponse:
    properties:
      code:
        example: ITM001
        type: string
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Test item description
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      max_stock:
        example: 100
        type: integer
      min_stock:
        example: 10
        type: integer
      name:
        example: Test Item
        type: string
      tenant_id:
        example: 1
        type: integer
      unit:
        example: PCS
        type: string
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.LoginResponse:
    properties:
      menus:
        items:
          $ref: '#/definitions/handlers.MenuResponse'
        type: array
      token:
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.MenuResponse:
    description: Menu item response model
    properties:
      children:
        items:
          $ref: '#/definitions/handlers.MenuResponse'
        type: array
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      created_by:
        example: john.doe@example.com
        type: string
      icon:
        example: ni ni-chart-bar-32
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Dashboard
        type: string
      parent_id:
        example: 0
        type: integer
      sort:
        example: 1
        type: integer
      tenant_id:
        example: 1
        type: integer
      url:
        example: /dashboard
        type: string
    type: object
  handlers.OfficeInfo:
    properties:
      address:
        example: 123 Main St
        type: string
      code:
        example: OFF-001
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Main Office
        type: string
      phone:
        example: "+1234567890"
        type: string
    type: object
  handlers.OfficeResponse:
    description: Office response model
    properties:
      address:
        example: 123 Main St
        type: string
      code:
        example: MO001
        type: string
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      email:
        example: main@office.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Main Office
        type: string
      phone:
        example: "+1234567890"
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
      zone:
        $ref: '#/definitions/handlers.ZoneInfo'
      zone_id:
        example: 1
        type: integer
    type: object
  handlers.OrderInfo:
    properties:
      customer_email:
        type: string
      customer_phone:
        type: string
      delivery_address:
        type: string
      expected_delivery_date:
        type: string
      id:
        type: integer
      order_items:
        items:
          $ref: '#/definitions/handlers.OrderItemInfo'
        type: array
      order_number:
        type: string
      payment_status:
        type: string
      status:
        type: string
      total_amount:
        type: number
    type: object
  handlers.OrderItemInfo:
    properties:
      color:
        type: string
      final_subtotal:
        type: number
      id:
        type: integer
      product_name:
        type: string
      production_status:
        type: string
      quantity:
        type: integer
      size:
        type: string
    type: object
  handlers.OrderItemResponse:
    description: Order item response model
    properties:
      applied_discount_rule:
        example: '{}'
        type: string
      color:
        example: Red/White
        type: string
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      current_task:
        example: layout
        type: string
      customization:
        example: '{}'
        type: string
      discount_amount:
        example: 10
        type: number
      final_subtotal:
        example: 89.98
        type: number
      id:
        example: 1
        type: integer
      main_photo:
        type: string
      order_id:
        example: 1
        type: integer
      original_subtotal:
        example: 99.98
        type: number
      product_detail:
        $ref: '#/definitions/handlers.ProductDetail'
      product_id:
        example: 1
        type: integer
      production_status:
        example: pending
        type: string
      quantity:
        example: 2
        type: integer
      size:
        example: M
        type: string
      tasks:
        items:
          $ref: '#/definitions/handlers.TaskResponse'
        type: array
      tenant_id:
        example: 1
        type: integer
      unit_price:
        example: 49.99
        type: number
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.OrderResponse:
    description: Order response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      customer_email:
        example: john.doe@example.com
        type: string
      customer_name:
        example: John Doe
        type: string
      customer_phone:
        example: 123-456-7890
        type: string
      delivery_address:
        example: 123 Main St
        type: string
      discount_amount:
        example: 10
        type: number
      expected_delivery_date:
        example: "2024-03-25"
        type: string
      id:
        example: 1
        type: integer
      notes:
        example: Please deliver in the morning
        type: string
      office_id:
        example: 1
        type: integer
      order_items:
        items:
          $ref: '#/definitions/handlers.OrderItemResponse'
        type: array
      order_number:
        example: ORD-001
        type: string
      payment_status:
        example: unpaid
        type: string
      status:
        example: pending
        type: string
      subtotal:
        example: 100
        type: number
      tenant_id:
        example: 1
        type: integer
      total_amount:
        example: 90
        type: number
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.PaymentResponse:
    description: Payment response model
    properties:
      amount:
        example: 100
        type: number
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      id:
        example: 1
        type: integer
      notes:
        example: Payment received
        type: string
      order_id:
        example: 1
        type: integer
      payment_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      payment_method:
        example: credit_card
        type: string
      reference_number:
        example: PAY-001
        type: string
      status:
        example: completed
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.PermissionResponse:
    description: Permission response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Permission to create new users
        type: string
      id:
        example: 1
        type: integer
      name:
        example: CREATE_USER
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.ProductCategoryResponse:
    description: Product category response model
    properties:
      code:
        example: SOCCER
        type: string
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Soccer team jerseys and uniforms
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      name:
        example: Soccer Jersey
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.ProductDetail:
    description: Product detail model
    properties:
      description:
        example: Product Description
        type: string
      name:
        example: Product Name
        type: string
    type: object
  handlers.ProductResponse:
    description: Product response model
    properties:
      base_price:
        example: 49.99
        type: number
      bulk_discount_rules:
        additionalProperties:
          type: integer
        example:
          "10": 5
          "20": 10
          "50": 15
        type: object
      category:
        $ref: '#/definitions/handlers.CategoryInfo'
      category_id:
        example: 1
        type: integer
      code:
        example: PSJ001
        type: string
      color_options:
        example:
        - '["Red/White"'
        - ' "Blue/White"'
        - ' "Green/White"'
        - ' "Custom"]'
        items:
          type: string
        type: array
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      customization_options:
        additionalProperties:
          type: boolean
        example:
          name: true
          number: true
          patches: true
          team_logo: true
        type: object
      description:
        example: Professional grade soccer jersey
        type: string
      id:
        example: 1
        type: integer
      images:
        items:
          $ref: '#/definitions/handlers.ImageInfo'
        type: array
      is_active:
        example: true
        type: boolean
      material:
        example: Premium Polyester
        type: string
      min_order_quantity:
        example: 1
        type: integer
      name:
        example: Pro Soccer Jersey
        type: string
      production_time:
        example: 5
        type: integer
      size_available:
        example:
        - '["S"'
        - ' "M"'
        - ' "L"'
        - ' "XL"'
        - ' "XXL"]'
        items:
          type: string
        type: array
      stock_status:
        example: in_stock
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
      weight:
        example: 180
        type: number
    type: object
  handlers.PurchaseOrderItemResponse:
    properties:
      id:
        type: integer
      item:
        $ref: '#/definitions/handlers.ItemResponse'
      quantity:
        type: integer
      total_price:
        type: number
      unit_price:
        type: number
    type: object
  handlers.PurchaseOrderResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/handlers.PurchaseOrderItemResponse'
        type: array
      notes:
        type: string
      order_date:
        type: string
      po_number:
        type: string
      status:
        type: string
      supplier:
        $ref: '#/definitions/handlers.SupplierResponse'
      total_amount:
        type: number
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  handlers.RegionInfo:
    properties:
      description:
        example: Northern region
        type: string
      id:
        example: 1
        type: integer
      name:
        example: North Region
        type: string
    type: object
  handlers.RegionResponse:
    description: Region response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Northern region
        type: string
      id:
        example: 1
        type: integer
      name:
        example: North Region
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
      zones:
        items:
          $ref: '#/definitions/zone.Zone'
        type: array
    type: object
  handlers.RejectPettyCashModelRequest:
    description: Reject petty cash request model
    properties:
      reason:
        example: Insufficient documentation
        type: string
    required:
    - reason
    type: object
  handlers.RoleResponse:
    description: Role response model
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      created_by:
        example: john.doe@example.com
        type: string
      description:
        example: Administrator role with full access
        type: string
      id:
        example: 1
        type: integer
      menus:
        items:
          $ref: '#/definitions/handlers.MenuResponse'
        type: array
      name:
        example: Admin
        type: string
      permissions:
        items:
          $ref: '#/definitions/handlers.PermissionResponse'
        type: array
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      updated_by:
        example: john.doe@example.com
        type: string
    type: object
  handlers.StockMovementResponse:
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      id:
        example: 1
        type: integer
      item:
        $ref: '#/definitions/handlers.ItemResponse'
      movement_type:
        example: in
        type: string
      notes:
        example: Initial stock
        type: string
      quantity:
        example: 100
        type: integer
      reference_id:
        example: 1
        type: integer
      reference_type:
        example: purchase
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.StockOpnameDetailResponse:
    properties:
      actual_qty:
        example: 95
        type: integer
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      difference_qty:
        example: -5
        type: integer
      id:
        example: 1
        type: integer
      item:
        $ref: '#/definitions/handlers.ItemResponse'
      notes:
        example: Stock count mismatch
        type: string
      stock_opname_id:
        example: 1
        type: integer
      system_qty:
        example: 100
        type: integer
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.StockOpnameResponse:
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      details:
        items:
          $ref: '#/definitions/handlers.StockOpnameDetailResponse'
        type: array
      id:
        example: 1
        type: integer
      notes:
        example: Monthly stock count
        type: string
      opname_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      opname_number:
        example: OPN/2024/001
        type: string
      status:
        example: draft
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.SuccessResponse:
    description: Standard success response model
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  handlers.SupplierResponse:
    description: Supplier response model
    properties:
      address:
        example: 123 Textile Road, Fabric City
        type: string
      bank_account_name:
        example: Premium Fabrics Co.
        type: string
      bank_account_number:
        example: "1234567890"
        type: string
      bank_name:
        example: City Bank
        type: string
      code:
        example: SUP-001
        type: string
      contact_person:
        example: John Smith
        type: string
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      email:
        example: john@premiumfabrics.com
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      name:
        example: Premium Fabrics Co.
        type: string
      phone:
        example: +1-555-0123
        type: string
      tax_number:
        example: TAX123456
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.TaskResponse:
    description: Task response model
    properties:
      completed_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      employee_id:
        example: 1
        type: integer
      employee_name:
        example: John Doe
        type: string
      id:
        example: 1
        type: integer
      notes:
        example: Handle with care
        type: string
      order_item_id:
        example: 1
        type: integer
      sequence_number:
        example: 1
        type: integer
      started_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      status:
        example: pending
        type: string
      task_type:
        example: washing
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.TransactionCategoryResponse:
    properties:
      code:
        example: INC-SALES
        type: string
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Income from sales
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      name:
        example: Sales Income
        type: string
      tenant_id:
        example: 1
        type: integer
      type:
        example: income
        type: string
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.UpdateDivisionEmployeesRequest:
    description: Update division employees request model
    properties:
      employee_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - employee_ids
    type: object
  handlers.UpdateDivisionRequest:
    description: Update division request model
    properties:
      description:
        example: Administration department
        type: string
      name:
        example: ADMIN
        type: string
    required:
    - name
    type: object
  handlers.UpdateEmployeeRequest:
    description: Update employee request model
    properties:
      DivisionID:
        example: 1
        type: integer
      email:
        example: alice.johnson@email.com
        type: string
      name:
        example: Alice Johnson
        type: string
      phone:
        example: 123-456-7890
        type: string
    required:
    - DivisionID
    - email
    - name
    type: object
  handlers.UpdateItemRequest:
    properties:
      description:
        example: Test item description
        type: string
      is_active:
        example: true
        type: boolean
      max_stock:
        example: 100
        type: integer
      min_stock:
        example: 10
        type: integer
      name:
        example: Test Item
        type: string
      unit:
        example: PCS
        type: string
    required:
    - name
    - unit
    type: object
  handlers.UpdateMenuRequest:
    description: Update menu request model
    properties:
      icon:
        example: ni ni-chart-bar-32
        type: string
      name:
        example: Dashboard
        type: string
      parent_id:
        example: 0
        type: integer
      sort:
        example: 1
        type: integer
      url:
        example: /dashboard
        type: string
    required:
    - name
    type: object
  handlers.UpdateOfficeRequest:
    description: Update office request model
    properties:
      address:
        example: 123 Main St
        type: string
      code:
        example: MO001
        type: string
      email:
        example: main@office.com
        type: string
      name:
        example: Main Office
        type: string
      phone:
        example: "+1234567890"
        type: string
      zone_id:
        example: 1
        type: integer
    required:
    - code
    - email
    - name
    type: object
  handlers.UpdateOrderRequest:
    description: Update order request model
    properties:
      customer_email:
        example: john.doe@example.com
        type: string
      customer_name:
        example: John Doe
        type: string
      customer_phone:
        example: 123-456-7890
        type: string
      delivery_address:
        example: 123 Main St
        type: string
      discount_amount:
        example: 10
        type: number
      expected_delivery_date:
        example: "2024-03-25"
        type: string
      notes:
        example: Please deliver in the morning
        type: string
      office_id:
        example: 1
        type: integer
      payment_status:
        example: unpaid
        type: string
      status:
        example: pending
        type: string
      subtotal:
        example: 100
        type: number
      total_amount:
        example: 90
        type: number
    required:
    - customer_email
    - customer_name
    - office_id
    - payment_status
    - status
    - subtotal
    - total_amount
    type: object
  handlers.UpdateOrderStatusRequest:
    properties:
      additional_message:
        example: Your order will be ready in 2 days
        type: string
      send_notification:
        example: true
        type: boolean
      status:
        example: in_production
        type: string
    required:
    - status
    type: object
  handlers.UpdatePaymentRequest:
    description: Update payment request model
    properties:
      amount:
        example: 100
        type: number
      notes:
        example: Payment received
        type: string
      payment_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      payment_method:
        example: credit_card
        type: string
      reference_number:
        example: PAY-001
        type: string
      status:
        example: completed
        type: string
    required:
    - amount
    - payment_method
    - reference_number
    - status
    type: object
  handlers.UpdatePermissionRequest:
    description: Update permission request model
    properties:
      description:
        example: Permission to create new users
        type: string
      name:
        example: CREATE_USER
        type: string
    required:
    - name
    type: object
  handlers.UpdateProductCategoryRequest:
    description: Update product category request model
    properties:
      code:
        example: SOCCER
        type: string
      description:
        example: Soccer team jerseys and uniforms
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Soccer Jersey
        type: string
    required:
    - code
    - name
    type: object
  handlers.UpdateProductRequest:
    description: Update product request model
    properties:
      base_price:
        example: 49.99
        minimum: 0
        type: number
      bulk_discount_rules:
        additionalProperties:
          type: integer
        example:
          "10": 5
          "20": 10
          "50": 15
        type: object
      category_id:
        example: 1
        type: integer
      code:
        example: PSJ001
        type: string
      color_options:
        example:
        - '["Red/White"'
        - ' "Blue/White"'
        - ' "Green/White"'
        - ' "Custom"]'
        items:
          type: string
        type: array
      customization_options:
        additionalProperties:
          type: boolean
        example:
          name: true
          number: true
          patches: true
          team_logo: true
        type: object
      description:
        example: Professional grade soccer jersey
        type: string
      is_active:
        example: true
        type: boolean
      material:
        example: Premium Polyester
        type: string
      min_order_quantity:
        example: 1
        minimum: 1
        type: integer
      name:
        example: Pro Soccer Jersey
        type: string
      production_time:
        example: 5
        type: integer
      size_available:
        example:
        - '["S"'
        - ' "M"'
        - ' "L"'
        - ' "XL"'
        - ' "XXL"]'
        items:
          type: string
        type: array
      stock_status:
        example: in_stock
        type: string
      weight:
        example: 180
        type: number
    required:
    - base_price
    - category_id
    - code
    - min_order_quantity
    - name
    type: object
  handlers.UpdateRegionRequest:
    description: Update region request model
    properties:
      description:
        example: Northern region
        type: string
      name:
        example: North Region
        type: string
    required:
    - name
    type: object
  handlers.UpdateRoleRequest:
    description: Update role request model
    properties:
      description:
        example: Administrator role with full access
        type: string
      name:
        example: Admin
        type: string
      permission_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  handlers.UpdateStockOpnameDetailRequest:
    properties:
      actual_qty:
        example: 95
        type: integer
      notes:
        example: Stock count mismatch
        type: string
    required:
    - actual_qty
    type: object
  handlers.UpdateStockOpnameRequest:
    properties:
      notes:
        example: Monthly stock count
        type: string
      opname_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      status:
        example: in_progress
        type: string
    required:
    - opname_date
    - status
    type: object
  handlers.UpdateSupplierRequest:
    description: Update supplier request model
    properties:
      address:
        example: 123 Textile Road, Fabric City
        type: string
      bank_account_name:
        example: Premium Fabrics Co.
        type: string
      bank_account_number:
        example: "1234567890"
        type: string
      bank_name:
        example: City Bank
        type: string
      code:
        example: SUP-001
        type: string
      contact_person:
        example: John Smith
        type: string
      email:
        example: john@premiumfabrics.com
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Premium Fabrics Co.
        type: string
      phone:
        example: +1-555-0123
        type: string
      tax_number:
        example: TAX123456
        type: string
    required:
    - code
    - email
    - name
    type: object
  handlers.UpdateTaskRequest:
    description: Update task request model
    properties:
      completed_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      employee_id:
        example: 1
        type: integer
      notes:
        example: Handle with care
        type: string
      order_item_id:
        example: 1
        type: integer
      sequence_number:
        example: 1
        type: integer
      started_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      status:
        example: pending
        type: string
      task_type:
        example: washing
        type: string
    required:
    - order_item_id
    - sequence_number
    - status
    - task_type
    type: object
  handlers.UpdateTransactionCategoryRequest:
    properties:
      description:
        example: Income from sales
        type: string
      is_active:
        example: true
        type: boolean
      name:
        example: Sales Income
        type: string
      type:
        example: income
        type: string
    required:
    - name
    - type
    type: object
  handlers.UpdateUserRequest:
    description: Update user request model
    properties:
      email:
        example: john.doe@example.com
        type: string
      username:
        example: john.doe
        type: string
    required:
    - email
    - username
    type: object
  handlers.UpdateWorkOrderRequest:
    properties:
      assigned_to:
        example: 1
        type: integer
      customer_name:
        example: John Doe
        type: string
      description:
        example: Production of 100 jerseys
        type: string
      end_date:
        example: "2024-03-26T21:41:49Z"
        type: string
      estimated_cost:
        example: 1000
        type: number
      items:
        items:
          $ref: '#/definitions/handlers.WorkOrderItemInput'
        type: array
      start_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      tasks:
        items:
          $ref: '#/definitions/handlers.WorkOrderTaskInput'
        type: array
      work_type:
        example: production
        type: string
    required:
    - assigned_to
    - customer_name
    - description
    - end_date
    - estimated_cost
    - start_date
    - work_type
    type: object
  handlers.UpdateZoneRequest:
    description: Update zone request model
    properties:
      description:
        example: Northern region zone
        type: string
      name:
        example: North Zone
        type: string
      region_id:
        example: 1
        type: integer
    required:
    - name
    type: object
  handlers.UserResponse:
    description: User response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      role_id:
        example: 1
        type: integer
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
      username:
        example: john.doe
        type: string
    type: object
  handlers.WorkOrderItemInfo:
    properties:
      description:
        example: Fabric material
        type: string
      id:
        example: 1
        type: integer
      item_id:
        example: 1
        type: integer
      quantity:
        example: 100
        type: integer
      total_price:
        example: 1000
        type: number
      unit_price:
        example: 10
        type: number
    type: object
  handlers.WorkOrderItemInput:
    properties:
      description:
        example: Fabric material
        type: string
      item_id:
        example: 1
        type: integer
      quantity:
        example: 100
        type: integer
      unit_price:
        example: 10
        type: number
    required:
    - item_id
    - quantity
    - unit_price
    type: object
  handlers.WorkOrderResponse:
    properties:
      actual_cost:
        type: number
      assigned_to:
        allOf:
        - $ref: '#/definitions/handlers.EmployeeInfo'
        description: Expanded employee details
      completion_notes:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      customer_name:
        type: string
      description:
        type: string
      end_date:
        type: string
      estimated_cost:
        type: number
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/handlers.WorkOrderItemInfo'
        type: array
      order:
        allOf:
        - $ref: '#/definitions/handlers.OrderInfo'
        description: Expanded order details
      spk_number:
        type: string
      start_date:
        type: string
      status:
        type: string
      tasks:
        items:
          $ref: '#/definitions/handlers.WorkOrderTaskItem'
        type: array
      updated_at:
        type: string
      updated_by:
        type: string
      work_type:
        type: string
    type: object
  handlers.WorkOrderTaskInput:
    properties:
      assigned_to:
        example: 1
        type: integer
      description:
        example: Cut the fabric according to patterns
        type: string
      end_date:
        example: "2024-03-24T23:41:49Z"
        type: string
      start_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      task_name:
        example: Cutting
        type: string
    required:
    - assigned_to
    - end_date
    - start_date
    - task_name
    type: object
  handlers.WorkOrderTaskItem:
    properties:
      assigned_to:
        example: 1
        type: integer
      description:
        example: Cut the fabric according to patterns
        type: string
      end_date:
        example: "2024-03-24T23:41:49Z"
        type: string
      id:
        example: 1
        type: integer
      notes:
        example: Ready for cutting
        type: string
      start_date:
        example: "2024-03-24T21:41:49Z"
        type: string
      status:
        example: pending
        type: string
      task_name:
        example: Cutting
        type: string
    type: object
  handlers.ZoneInfo:
    properties:
      description:
        example: Northern zone
        type: string
      id:
        example: 1
        type: integer
      name:
        example: North Zone
        type: string
    type: object
  handlers.ZoneResponse:
    description: Zone response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Northern region zone
        type: string
      id:
        example: 1
        type: integer
      name:
        example: North Zone
        type: string
      offices:
        items:
          $ref: '#/definitions/handlers.OfficeInfo'
        type: array
      region:
        $ref: '#/definitions/handlers.RegionInfo'
      region_id:
        example: 1
        type: integer
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  models.Zone:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      region_id:
        type: integer
    type: object
  office.Office:
    properties:
      address:
        type: string
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      tenant_id:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
      zone:
        $ref: '#/definitions/models.Zone'
      zone_id:
        type: integer
    type: object
  zone.Zone:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      offices:
        items:
          $ref: '#/definitions/office.Office'
        type: array
      region_id:
        type: integer
      tenant_id:
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Vomo backend API documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Vomo API
  version: "1.0"
paths:
  /audits/date-range:
    get:
      consumes:
      - application/json
      description: Get audit history within a specific date range
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      - description: Filter by Entity Type
        in: query
        name: entity_type
        type: string
      - description: Filter by Action
        in: query
        name: action
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.AuditResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get audit history by date range
      tags:
      - Audit
  /audits/entity/{type}/{id}:
    get:
      consumes:
      - application/json
      description: Get audit history for a specific entity
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Entity Type
        in: path
        name: type
        required: true
        type: string
      - description: Entity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.AuditResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get entity audit history
      tags:
      - Audit
  /audits/tenant/{id}:
    get:
      consumes:
      - application/json
      description: Get audit history for a specific tenant
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.AuditResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tenant audit history
      tags:
      - Audit
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User login
      tags:
      - auth
  /backups:
    get:
      consumes:
      - application/json
      description: Get a list of all available backups
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/backup.Backup'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all backups
      tags:
      - backup
    post:
      consumes:
      - application/json
      description: Create a new backup of the database
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/backup.Backup'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new database backup
      tags:
      - backup
  /backups/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific backup
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Backup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a backup
      tags:
      - backup
  /backups/{id}/restore:
    post:
      consumes:
      - application/json
      description: Restore the database from a specific backup
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Backup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Restore from a backup
      tags:
      - backup
  /cash-flows:
    get:
      description: Get all cash flow records
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.CashFlowResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all cash flow records
      tags:
      - CashFlow
    post:
      consumes:
      - application/json
      description: Create a new cash flow record with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Cash Flow Data
        in: body
        name: cashFlow
        required: true
        schema:
          $ref: '#/definitions/accounting.CashFlow'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.CashFlowResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new cash flow record
      tags:
      - CashFlow
  /cash-flows/{id}:
    delete:
      description: Delete an existing cash flow record
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Cash Flow ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Cash flow record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a cash flow record
      tags:
      - CashFlow
    get:
      description: Get cash flow details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Cash Flow ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CashFlowResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Cash flow record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a cash flow record by ID
      tags:
      - CashFlow
    put:
      consumes:
      - application/json
      description: Update an existing cash flow record with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Cash Flow ID
        in: path
        name: id
        required: true
        type: integer
      - description: Cash Flow Data
        in: body
        name: cashFlow
        required: true
        schema:
          $ref: '#/definitions/accounting.CashFlow'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.CashFlowResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Cash flow record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a cash flow record
      tags:
      - CashFlow
  /divisions:
    get:
      description: Get all divisions
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.DivisionResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all divisions
      tags:
      - Division
    post:
      consumes:
      - application/json
      description: Create a new division with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Division Data
        in: body
        name: division
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateDivisionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.DivisionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new division
      tags:
      - Division
  /divisions/{id}:
    delete:
      description: Delete an existing division
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Division ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Division not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a division
      tags:
      - Division
    get:
      description: Get division details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Division ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DivisionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Division not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a division by ID
      tags:
      - Division
    put:
      consumes:
      - application/json
      description: Update an existing division with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Division ID
        in: path
        name: id
        required: true
        type: integer
      - description: Division Data
        in: body
        name: division
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateDivisionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DivisionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Division not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a division
      tags:
      - Division
  /divisions/{id}/employees:
    post:
      consumes:
      - application/json
      description: Update the list of employees assigned to a division
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Division ID
        in: path
        name: id
        required: true
        type: integer
      - description: Employee IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateDivisionEmployeesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.DivisionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Division not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update division employees
      tags:
      - Division
  /employees:
    get:
      description: Get all employees
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.EmployeeResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all employees
      tags:
      - Employee
    post:
      consumes:
      - application/json
      description: Create a new employee with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Employee Data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.EmployeeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new employee
      tags:
      - Employee
  /employees/{id}:
    delete:
      description: Delete an existing employee
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an employee
      tags:
      - Employee
    get:
      description: Get employee details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.EmployeeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an employee by ID
      tags:
      - Employee
    put:
      consumes:
      - application/json
      description: Update an existing employee with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: Employee Data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.EmployeeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Employee not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an employee
      tags:
      - Employee
  /employees/by-division:
    get:
      description: Get all employees for a specific division
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Division ID
        in: query
        name: division_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.EmployeeResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get employees by division
      tags:
      - Employee
  /items:
    get:
      description: Get all items
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ItemResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all items
      tags:
      - Item
    post:
      consumes:
      - application/json
      description: Create a new item with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateItemRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ItemResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new item
      tags:
      - Item
  /items/{id}:
    delete:
      description: Delete an existing item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an item
      tags:
      - Item
    get:
      description: Get item details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ItemResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an item by ID
      tags:
      - Item
    put:
      consumes:
      - application/json
      description: Update an existing item with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ItemResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an item
      tags:
      - Item
  /menus:
    get:
      description: Get all menu items
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.MenuResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all menus
      tags:
      - Menu
    post:
      consumes:
      - application/json
      description: Create a new menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu Data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.MenuResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new menu
      tags:
      - Menu
  /menus/{id}:
    delete:
      description: Delete an existing menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Menu not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a menu
      tags:
      - Menu
    get:
      description: Get menu details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MenuResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Menu not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a menu by ID
      tags:
      - Menu
    put:
      consumes:
      - application/json
      description: Update an existing menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu Data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MenuResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Menu not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a menu
      tags:
      - Menu
  /menus/by-role:
    get:
      description: Get menu items by role ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: query
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.MenuResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get menus by role
      tags:
      - Menu
  /menus/by-user/{user_id}:
    get:
      description: Get menu items by user ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.MenuResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get menus by user
      tags:
      - Menu
  /offices:
    get:
      description: Get all offices
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OfficeResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all offices
      tags:
      - Office
    post:
      consumes:
      - application/json
      description: Create a new office with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office Data
        in: body
        name: office
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateOfficeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.OfficeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new office
      tags:
      - Office
  /offices/{id}:
    delete:
      description: Delete an existing office
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an office
      tags:
      - Office
    get:
      description: Get office details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OfficeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an office by ID
      tags:
      - Office
    put:
      consumes:
      - application/json
      description: Update an existing office with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      - description: Office Data
        in: body
        name: office
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateOfficeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OfficeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an office
      tags:
      - Office
  /offices/{id}/zone:
    post:
      consumes:
      - application/json
      description: Assign a zone to an existing office
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      - description: Zone ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignZoneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OfficeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign zone to an office
      tags:
      - Office
  /offices/by-zone:
    get:
      description: Get all offices for a specific zone
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: query
        name: zone_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OfficeResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get offices by zone
      tags:
      - Office
  /orders:
    get:
      description: Get all orders
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OrderResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders
      tags:
      - Order
    post:
      consumes:
      - application/json
      description: Create a new order with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Order Data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Order
  /orders/{id}:
    delete:
      description: Delete an existing order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an order
      tags:
      - Order
    get:
      description: Get order details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an order by ID
      tags:
      - Order
    put:
      consumes:
      - application/json
      description: Update an existing order with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order Data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an order
      tags:
      - Order
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update an order's status and optionally send WhatsApp notification
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status Update Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - Order
  /orders/by-customer:
    get:
      description: Get all orders for a specific customer email
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Customer Email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OrderResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get orders by customer email
      tags:
      - Order
  /orders/by-payment-status:
    get:
      description: Get all orders with a specific payment status
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Payment Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OrderResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get orders by payment status
      tags:
      - Order
  /orders/by-status:
    get:
      description: Get all orders with a specific status
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Order Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OrderResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get orders by status
      tags:
      - Order
  /payments:
    get:
      description: Get all payments
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.PaymentResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all payments
      tags:
      - Payment
    post:
      consumes:
      - application/json
      description: Create a new payment with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Payment Data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/handlers.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.PaymentResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new payment
      tags:
      - Payment
  /payments/{id}:
    delete:
      description: Delete an existing payment
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Payment not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a payment
      tags:
      - Payment
    get:
      description: Get payment details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaymentResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Payment not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a payment by ID
      tags:
      - Payment
    put:
      consumes:
      - application/json
      description: Update an existing payment with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Payment Data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PaymentResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Payment not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a payment
      tags:
      - Payment
  /payments/by-order:
    get:
      description: Get all payments for a specific order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.PaymentResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get payments by order ID
      tags:
      - Payment
  /payments/by-status:
    get:
      description: Get all payments with a specific status
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Payment Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.PaymentResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get payments by status
      tags:
      - Payment
  /permissions:
    get:
      description: Get all permissions
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.PermissionResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all permissions
      tags:
      - Permission
    post:
      consumes:
      - application/json
      description: Create a new permission with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Permission Data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/handlers.CreatePermissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.PermissionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new permission
      tags:
      - Permission
  /permissions/{id}:
    delete:
      description: Delete an existing permission
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a permission
      tags:
      - Permission
    get:
      description: Get permission details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PermissionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a permission by ID
      tags:
      - Permission
    put:
      consumes:
      - application/json
      description: Update an existing permission with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission Data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdatePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PermissionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a permission
      tags:
      - Permission
  /petty-cash:
    get:
      description: Get all petty cash records
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/accounting.PettyCash'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all petty cash records
      tags:
      - PettyCash
    post:
      consumes:
      - application/json
      description: Create a new petty cash record with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash Data
        in: body
        name: pettyCash
        required: true
        schema:
          $ref: '#/definitions/accounting.PettyCash'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounting.PettyCash'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new petty cash record
      tags:
      - PettyCash
  /petty-cash-requests:
    get:
      description: Get all petty cash requests
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/accounting.PettyCashRequest'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all petty cash requests
      tags:
      - PettyCashRequest
    post:
      consumes:
      - application/json
      description: Create a new petty cash request with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash Request Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/accounting.PettyCashRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounting.PettyCashRequest'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new petty cash request
      tags:
      - PettyCashRequest
  /petty-cash-requests/{id}:
    delete:
      description: Delete an existing petty cash request
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Petty cash request not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a petty cash request
      tags:
      - PettyCashRequest
    get:
      description: Get petty cash request details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounting.PettyCashRequest'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Petty cash request not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a petty cash request by ID
      tags:
      - PettyCashRequest
    put:
      consumes:
      - application/json
      description: Update an existing petty cash request with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: Petty Cash Request Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/accounting.PettyCashRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounting.PettyCashRequest'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Petty cash request not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a petty cash request
      tags:
      - PettyCashRequest
  /petty-cash-requests/{id}/approve:
    post:
      description: Approve an existing petty cash request
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Petty cash request not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Approve a petty cash request
      tags:
      - PettyCashRequest
  /petty-cash-requests/{id}/reject:
    post:
      consumes:
      - application/json
      description: Reject an existing petty cash request
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: Rejection Reason
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RejectPettyCashModelRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Petty cash request not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reject a petty cash request
      tags:
      - PettyCashRequest
  /petty-cash/{id}:
    delete:
      description: Delete an existing petty cash record
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Petty cash record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a petty cash record
      tags:
      - PettyCash
    get:
      description: Get petty cash details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounting.PettyCash'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Petty cash record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a petty cash record by ID
      tags:
      - PettyCash
    put:
      consumes:
      - application/json
      description: Update an existing petty cash record with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Petty Cash ID
        in: path
        name: id
        required: true
        type: integer
      - description: Petty Cash Data
        in: body
        name: pettyCash
        required: true
        schema:
          $ref: '#/definitions/accounting.PettyCash'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounting.PettyCash'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Petty cash record not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a petty cash record
      tags:
      - PettyCash
  /petty-cash/summary:
    get:
      description: Get comprehensive summary and analytics for petty cash management
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounting.PettyCashSummary'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get detailed petty cash summary
      tags:
      - PettyCash
  /product-categories:
    get:
      description: Get all product categories
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ProductCategoryResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all product categories
      tags:
      - Product Category
    post:
      consumes:
      - application/json
      description: Create a new product category with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Product Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateProductCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ProductCategoryResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product category
      tags:
      - Product Category
  /product-categories/{id}:
    delete:
      description: Delete an existing product category
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Product Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Product category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product category
      tags:
      - Product Category
    get:
      description: Get product category details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Product Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProductCategoryResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Product category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a product category by ID
      tags:
      - Product Category
    put:
      consumes:
      - application/json
      description: Update an existing product category with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Product Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProductCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProductCategoryResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Product category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product category
      tags:
      - Product Category
  /products:
    get:
      description: Get all products
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ProductResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Product
  /products/{id}:
    delete:
      description: Delete an existing product
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Product
    get:
      description: Get product details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update an existing product with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ProductResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Product
  /products/category/{category_id}:
    get:
      description: Get all products belonging to a specific category
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ProductResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get products by category
      tags:
      - Product
  /purchase-orders:
    get:
      description: Get all purchase orders with supplier and item details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.PurchaseOrderResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all purchase orders
      tags:
      - PurchaseOrder
    post:
      consumes:
      - application/json
      description: Create a new purchase order with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Purchase Order Data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/accounting.PurchaseOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounting.PurchaseOrder'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new purchase order
      tags:
      - PurchaseOrder
  /purchase-orders/{id}:
    delete:
      description: Delete an existing purchase order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Purchase Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Purchase order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a purchase order
      tags:
      - PurchaseOrder
    get:
      description: Get purchase order details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Purchase Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounting.PurchaseOrder'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Purchase order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a purchase order by ID
      tags:
      - PurchaseOrder
    put:
      consumes:
      - application/json
      description: Update an existing purchase order with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Purchase Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Purchase Order Data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/accounting.PurchaseOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accounting.PurchaseOrder'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Purchase order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a purchase order
      tags:
      - PurchaseOrder
  /regions:
    get:
      description: Get all regions
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.RegionResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all regions
      tags:
      - Region
    post:
      consumes:
      - application/json
      description: Create a new region with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region Data
        in: body
        name: region
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRegionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RegionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new region
      tags:
      - Region
  /regions/{id}:
    delete:
      description: Delete an existing region
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Region not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a region
      tags:
      - Region
    get:
      description: Get region details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Region not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a region by ID
      tags:
      - Region
    put:
      consumes:
      - application/json
      description: Update an existing region with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: path
        name: id
        required: true
        type: integer
      - description: Region Data
        in: body
        name: region
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateRegionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Region not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a region
      tags:
      - Region
  /regions/{id}/zones:
    post:
      consumes:
      - application/json
      description: Assign zones to a specific region
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: path
        name: id
        required: true
        type: integer
      - description: Zone IDs to assign
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignZonesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Region not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign zones to a region
      tags:
      - Region
  /roles:
    get:
      description: Get a list of all roles with their permissions and menus
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.RoleResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create a new role with specified permissions
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role Data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RoleResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Role
  /roles/{id}:
    delete:
      description: Delete an existing role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a role
      tags:
      - Role
    get:
      description: Get role details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RoleResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a role by ID
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update an existing role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role Data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RoleResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - Role
  /roles/{id}/menus:
    post:
      consumes:
      - application/json
      description: Assign multiple menus to a role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu IDs to assign
        in: body
        name: menus
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignMenusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign menus to a role
      tags:
      - Role
  /roles/{id}/permissions:
    delete:
      consumes:
      - application/json
      description: Remove a list of permissions from a specific role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of permission IDs
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignPermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove permissions from a role
      tags:
      - Permission
    post:
      consumes:
      - application/json
      description: Assign a list of permissions to a specific role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of permission IDs
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignPermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign permissions to a role
      tags:
      - Permission
  /stock-movements:
    get:
      description: Get all stock movements
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.StockMovementResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all stock movements
      tags:
      - StockMovement
    post:
      consumes:
      - application/json
      description: Create a new stock movement with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Movement Data
        in: body
        name: movement
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateStockMovementRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.StockMovementResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new stock movement
      tags:
      - StockMovement
  /stock-movements/{id}:
    get:
      description: Get stock movement details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Movement ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.StockMovementResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Stock movement not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a stock movement by ID
      tags:
      - StockMovement
  /stock-movements/by-item:
    get:
      description: Get all stock movements for a specific item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Item ID
        in: query
        name: item_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.StockMovementResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get stock movements by item
      tags:
      - StockMovement
  /stock-movements/by-reference:
    get:
      description: Get all stock movements for a specific reference
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Reference Type
        in: query
        name: reference_type
        required: true
        type: string
      - description: Reference ID
        in: query
        name: reference_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.StockMovementResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get stock movements by reference
      tags:
      - StockMovement
  /stock-opnames:
    get:
      description: Get all stock opnames
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.StockOpnameResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all stock opnames
      tags:
      - StockOpname
    post:
      consumes:
      - application/json
      description: Create a new stock opname with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Opname Data
        in: body
        name: opname
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateStockOpnameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.StockOpnameResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new stock opname
      tags:
      - StockOpname
  /stock-opnames/{id}:
    delete:
      description: Delete an existing stock opname
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Opname ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Stock opname not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a stock opname
      tags:
      - StockOpname
    get:
      description: Get stock opname details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Opname ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.StockOpnameResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Stock opname not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a stock opname by ID
      tags:
      - StockOpname
    put:
      consumes:
      - application/json
      description: Update an existing stock opname with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Opname ID
        in: path
        name: id
        required: true
        type: integer
      - description: Stock Opname Data
        in: body
        name: opname
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateStockOpnameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.StockOpnameResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Stock opname not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a stock opname
      tags:
      - StockOpname
  /stock-opnames/{id}/details:
    post:
      consumes:
      - application/json
      description: Add a new detail to an existing stock opname
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Opname ID
        in: path
        name: id
        required: true
        type: integer
      - description: Stock Opname Detail Data
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateStockOpnameDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.StockOpnameDetailResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Stock opname not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add detail to stock opname
      tags:
      - StockOpname
  /stock-opnames/{id}/details/{detail_id}:
    delete:
      description: Delete an existing stock opname detail
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Opname ID
        in: path
        name: id
        required: true
        type: integer
      - description: Detail ID
        in: path
        name: detail_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Stock opname detail not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete stock opname detail
      tags:
      - StockOpname
    put:
      consumes:
      - application/json
      description: Update an existing stock opname detail
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Stock Opname ID
        in: path
        name: id
        required: true
        type: integer
      - description: Detail ID
        in: path
        name: detail_id
        required: true
        type: integer
      - description: Stock Opname Detail Data
        in: body
        name: detail
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateStockOpnameDetailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.StockOpnameDetailResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Stock opname detail not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update stock opname detail
      tags:
      - StockOpname
  /suppliers:
    get:
      description: Get all suppliers
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.SupplierResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all suppliers
      tags:
      - Supplier
    post:
      consumes:
      - application/json
      description: Create a new supplier with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Supplier Data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateSupplierRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.SupplierResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new supplier
      tags:
      - Supplier
  /suppliers/{id}:
    delete:
      description: Delete an existing supplier
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a supplier
      tags:
      - Supplier
    get:
      description: Get supplier details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SupplierResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a supplier by ID
      tags:
      - Supplier
    put:
      consumes:
      - application/json
      description: Update an existing supplier with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      - description: Supplier Data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateSupplierRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SupplierResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Supplier not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a supplier
      tags:
      - Supplier
  /tasks:
    get:
      description: Get all tasks
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TaskResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all tasks
      tags:
      - Task
    post:
      consumes:
      - application/json
      description: Create a new task with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Task Data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.TaskResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - Task
  /tasks/{id}:
    delete:
      description: Delete an existing task
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - Task
    get:
      description: Get task details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TaskResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a task by ID
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: Update an existing task with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task Data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TaskResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - Task
  /tasks/by-employee:
    get:
      description: Get all tasks assigned to an employee
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Employee ID
        in: query
        name: employee_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TaskResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tasks by employee ID
      tags:
      - Task
  /tasks/by-order-item:
    get:
      description: Get all tasks for a specific order item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Order Item ID
        in: query
        name: order_item_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TaskResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tasks by order item ID
      tags:
      - Task
  /tasks/by-status:
    get:
      description: Get all tasks with a specific status
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Task Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TaskResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tasks by status
      tags:
      - Task
  /tasks/by-type:
    get:
      description: Get all tasks of a specific type
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Task Type
        in: query
        name: task_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TaskResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tasks by task type
      tags:
      - Task
  /transaction-categories:
    get:
      description: Get all transaction categories
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.TransactionCategoryResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all transaction categories
      tags:
      - Transaction Category
    post:
      consumes:
      - application/json
      description: Create a new transaction category with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Transaction Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTransactionCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.TransactionCategoryResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new transaction category
      tags:
      - Transaction Category
  /transaction-categories/{id}:
    delete:
      description: Delete an existing transaction category
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Transaction Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Transaction Category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a transaction category
      tags:
      - Transaction Category
    get:
      description: Get transaction category details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Transaction Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TransactionCategoryResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Transaction Category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a transaction category by ID
      tags:
      - Transaction Category
    put:
      consumes:
      - application/json
      description: Update an existing transaction category with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Transaction Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transaction Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateTransactionCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TransactionCategoryResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Transaction Category not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a transaction category
      tags:
      - Transaction Category
  /users:
    get:
      description: Get a list of all users
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.UserResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - User
  /users/{id}:
    delete:
      description: Delete an existing user
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - User
    get:
      description: Get user details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update an existing user with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - User
  /work-orders:
    get:
      description: Get all work orders
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.WorkOrderResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all work orders
      tags:
      - WorkOrder
    post:
      consumes:
      - application/json
      description: Create a new work order with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order Data
        in: body
        name: workOrder
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateWorkOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.WorkOrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new work order
      tags:
      - WorkOrder
  /work-orders/{id}:
    delete:
      description: Delete an existing work order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a work order
      tags:
      - WorkOrder
    get:
      description: Get work order details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkOrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a work order by ID
      tags:
      - WorkOrder
    put:
      consumes:
      - application/json
      description: Update an existing work order with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Work Order Data
        in: body
        name: workOrder
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateWorkOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkOrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a work order
      tags:
      - WorkOrder
  /work-orders/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Mark a work order as cancelled with a reason
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Cancellation Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CancelWorkOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkOrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel a work order
      tags:
      - WorkOrder
  /work-orders/{id}/complete:
    post:
      consumes:
      - application/json
      description: Mark a work order as completed with completion notes and actual
        cost
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Completion Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CompleteWorkOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkOrderResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Complete a work order
      tags:
      - WorkOrder
  /work-orders/{id}/items:
    post:
      consumes:
      - application/json
      description: Create a new item for a work order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/handlers.WorkOrderItemInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.WorkOrderItemInfo'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new work order item
      tags:
      - WorkOrder
  /work-orders/{id}/items/{itemId}:
    delete:
      description: Delete an item from a work order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order or item not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a work order item
      tags:
      - WorkOrder
    put:
      consumes:
      - application/json
      description: Update an existing item in a work order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: integer
      - description: Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/handlers.WorkOrderItemInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkOrderItemInfo'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order or item not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a work order item
      tags:
      - WorkOrder
  /work-orders/{id}/tasks:
    post:
      consumes:
      - application/json
      description: Create a new task for a work order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task Data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/handlers.WorkOrderTaskInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.WorkOrderTaskItem'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new work order task
      tags:
      - WorkOrder
  /work-orders/{id}/tasks/{taskId}:
    delete:
      description: Delete a task from a work order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order or task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a work order task
      tags:
      - WorkOrder
    put:
      consumes:
      - application/json
      description: Update an existing task in a work order
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Work Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      - description: Task Data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/handlers.WorkOrderTaskInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.WorkOrderTaskItem'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Work order or task not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a work order task
      tags:
      - WorkOrder
  /zones:
    get:
      description: Get all zones
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ZoneResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all zones
      tags:
      - Zone
    post:
      consumes:
      - application/json
      description: Create a new zone with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone Data
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateZoneRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ZoneResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new zone
      tags:
      - Zone
  /zones/{id}:
    delete:
      description: Delete an existing zone
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a zone
      tags:
      - Zone
    get:
      description: Get zone details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ZoneResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a zone by ID
      tags:
      - Zone
    put:
      consumes:
      - application/json
      description: Update an existing zone with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      - description: Zone Data
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateZoneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ZoneResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a zone
      tags:
      - Zone
  /zones/{id}/offices:
    delete:
      consumes:
      - application/json
      description: Remove offices from an existing zone
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      - description: Office IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignOfficesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove offices from a zone
      tags:
      - Zone
    post:
      consumes:
      - application/json
      description: Assign offices to an existing zone
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      - description: Office IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignOfficesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ZoneResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign offices to a zone
      tags:
      - Zone
  /zones/by-region:
    get:
      description: Get all zones for a specific region
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: query
        name: region_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ZoneResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get zones by region
      tags:
      - Zone
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
