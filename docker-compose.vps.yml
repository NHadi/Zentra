services:
  # Traefik reverse proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@badamigroups.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme.json"
      - "--log.level=DEBUG"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${REMOTE_PATH}/traefik/acme.json:/etc/traefik/acme.json
    networks:
      - traefik-net

  # Frontend Development
  frontend_dev:
    image: nurulhadii/zentra-ui:dev
    container_name: frontend_dev
    restart: always
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=https://dev.zentra.badamigroups.com
      - NEXT_PUBLIC_API_MOCKING=false
      - NEXT_PUBLIC_SHOW_LOGGER=true
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.frontend-dev.rule=Host(`dev.bisnisqu.badamigroups.com`)"
      - "traefik.http.routers.frontend-dev.entrypoints=websecure"
      - "traefik.http.routers.frontend-dev.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend-dev.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.frontend-dev-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.frontend-dev.middlewares=frontend-dev-headers"
      - "traefik.http.services.frontend-dev.loadbalancer.server.scheme=http"
      - "traefik.http.services.frontend-dev.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.frontend-dev.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net

  # E-shop Development
  eshop_dev:
    image: nurulhadii/zentra-eshop:dev
    container_name: eshop_dev
    restart: always
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=https://dev.zentra.badamigroups.com
      - NEXT_PUBLIC_API_MOCKING=false
      - NEXT_PUBLIC_SHOW_LOGGER=true
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.eshop-dev.rule=Host(`dev.eshop.badamigroups.com`)"
      - "traefik.http.routers.eshop-dev.entrypoints=websecure"
      - "traefik.http.routers.eshop-dev.tls.certresolver=letsencrypt"
      - "traefik.http.services.eshop-dev.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.eshop-dev-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.eshop-dev.middlewares=eshop-dev-headers"
      - "traefik.http.services.eshop-dev.loadbalancer.server.scheme=http"
      - "traefik.http.services.eshop-dev.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.eshop-dev.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net

  # Backend Development
  backend_dev:
    image: nurulhadii/zentra-api:dev
    container_name: backend_dev
    restart: always
    environment:
      - GIN_MODE=debug
      - POSTGRES_HOST=postgres_dev
      - POSTGRES_PORT=5432
      - POSTGRES_DB=zentra-api_development
      - POSTGRES_USER=zentra-api_admin
      - POSTGRES_PASSWORD=zentra-api_admin_123@#$
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET_DEV}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET_DEV}
      - SERVER_PORT=8080
      - CORS_ALLOWED_ORIGINS=https://dev.bisnisqu.badamigroups.com,https://dev.eshop.badamigroups.com
    expose:
      - "8080"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ${REMOTE_PATH}/uploads:/app/uploads
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.backend-dev.rule=Host(`dev.zentra.badamigroups.com`)"
      - "traefik.http.routers.backend-dev.entrypoints=websecure"
      - "traefik.http.routers.backend-dev.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend-dev.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.backend-dev-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.backend-dev-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.backend-dev-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.backend-dev-cors.headers.accesscontrolalloworiginlist=https://dev.bisnisqu.badamigroups.com,https://dev.eshop.badamigroups.com"
      - "traefik.http.middlewares.backend-dev-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.backend-dev-cors.headers.addvaryheader=true"
      - "traefik.http.routers.backend-dev.middlewares=backend-dev-headers,backend-dev-cors"
      - "traefik.http.services.backend-dev.loadbalancer.server.scheme=http"
      - "traefik.http.services.backend-dev.loadbalancer.healthcheck.path=/api/health"
      - "traefik.http.services.backend-dev.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres_dev

  # Staging Environment
  frontend_staging:
    image: nurulhadii/zentra-ui:staging
    container_name: frontend_staging
    restart: always
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_API_URL=https://staging.zentra.badamigroups.com
      - NEXT_PUBLIC_API_MOCKING=false
      - NEXT_PUBLIC_SHOW_LOGGER=false
      - PORT=3000
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.frontend-staging.rule=Host(`staging.bisnisqu.badamigroups.com`)"
      - "traefik.http.routers.frontend-staging.entrypoints=websecure"
      - "traefik.http.routers.frontend-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend-staging.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.frontend-staging-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.frontend-staging.middlewares=frontend-staging-headers"
      - "traefik.http.services.frontend-staging.loadbalancer.server.scheme=http"
      - "traefik.http.services.frontend-staging.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.frontend-staging.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net

  eshop_staging:
    image: nurulhadii/zentra-eshop:staging
    container_name: eshop_staging
    restart: always
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_API_URL=https://staging.zentra.badamigroups.com
      - NEXT_PUBLIC_API_MOCKING=false
      - NEXT_PUBLIC_SHOW_LOGGER=false
      - PORT=3000
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.eshop-staging.rule=Host(`staging.eshop.badamigroups.com`)"
      - "traefik.http.routers.eshop-staging.entrypoints=websecure"
      - "traefik.http.routers.eshop-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.eshop-staging.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.eshop-staging-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.eshop-staging.middlewares=eshop-staging-headers"
      - "traefik.http.services.eshop-staging.loadbalancer.server.scheme=http"
      - "traefik.http.services.eshop-staging.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.eshop-staging.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net

  backend_staging:
    image: nurulhadii/zentra-api:staging
    container_name: backend_staging
    restart: always
    environment:
      - GIN_MODE=release
      - POSTGRES_HOST=postgres_staging
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB_STAGING}
      - POSTGRES_USER=${POSTGRES_USER_STAGING}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_STAGING}
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET_STAGING}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET_STAGING}
      - SERVER_PORT=8080
    volumes:
      - ${REMOTE_PATH}/uploads:/app/uploads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-staging.rule=Host(`staging.zentra.badamigroups.com`)"
      - "traefik.http.routers.backend-staging.entrypoints=websecure"
      - "traefik.http.routers.backend-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend-staging.loadbalancer.server.port=8080"
      - "traefik.http.routers.backend-staging.middlewares=default-chain@file"
      - "traefik.http.middlewares.backend-staging-timeout.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.backend-staging-timeout.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.backend-staging.middlewares=rate-limit@file"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres_staging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Environment
  frontend_prod:
    image: nurulhadii/zentra-ui:prod
    container_name: frontend_prod
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://zentra.badamigroups.com
      - NEXT_PUBLIC_API_MOCKING=false
      - NEXT_PUBLIC_SHOW_LOGGER=false
      - PORT=3000
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.frontend-prod.rule=Host(`bisnisqu.badamigroups.com`)"
      - "traefik.http.routers.frontend-prod.entrypoints=websecure"
      - "traefik.http.routers.frontend-prod.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend-prod.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.frontend-prod-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.frontend-prod.middlewares=frontend-prod-headers"
      - "traefik.http.services.frontend-prod.loadbalancer.server.scheme=http"
      - "traefik.http.services.frontend-prod.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.frontend-prod.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net

  eshop_prod:
    image: nurulhadii/zentra-eshop:prod
    container_name: eshop_prod
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://zentra.badamigroups.com
      - NEXT_PUBLIC_API_MOCKING=false
      - NEXT_PUBLIC_SHOW_LOGGER=false
      - PORT=3000
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.eshop-prod.rule=Host(`eshop.badamigroups.com`)"
      - "traefik.http.routers.eshop-prod.entrypoints=websecure"
      - "traefik.http.routers.eshop-prod.tls.certresolver=letsencrypt"
      - "traefik.http.services.eshop-prod.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.eshop-prod-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.eshop-prod.middlewares=eshop-prod-headers"
      - "traefik.http.services.eshop-prod.loadbalancer.server.scheme=http"
      - "traefik.http.services.eshop-prod.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.eshop-prod.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net

  backend_prod:
    image: nurulhadii/zentra-api:prod
    container_name: backend_prod
    restart: always
    environment:
      - GIN_MODE=release
      - POSTGRES_HOST=postgres_prod
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB_PROD}
      - POSTGRES_USER=${POSTGRES_USER_PROD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_PROD}
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - JWT_SECRET=${JWT_SECRET_PROD}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET_PROD}
      - SERVER_PORT=8080
    volumes:
      - ${REMOTE_PATH}/uploads:/app/uploads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-prod.rule=Host(`zentra.badamigroups.com`)"
      - "traefik.http.routers.backend-prod.entrypoints=websecure"
      - "traefik.http.routers.backend-prod.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend-prod.loadbalancer.server.port=8080"
      - "traefik.http.routers.backend-prod.middlewares=default-chain@file"
      - "traefik.http.middlewares.backend-prod-timeout.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.backend-prod-timeout.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.backend-prod.middlewares=rate-limit@file"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres_prod
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Databases
  postgres_dev:
    image: postgres:15.4-alpine
    container_name: postgres_dev
    restart: always
    environment:
      - POSTGRES_DB=zentra-api_development
      - POSTGRES_USER=zentra-api_admin
      - POSTGRES_PASSWORD=zentra-api_admin_123@#$
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    networks:
      - backend-net

  pgadmin_dev:
    image: dpage/pgadmin4:7.1
    container_name: pgadmin_dev
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@zentra-api.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=80
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.pgadmin-dev.rule=Host(`dev.pgadmin.badamigroups.com`)"
      - "traefik.http.routers.pgadmin-dev.entrypoints=websecure"
      - "traefik.http.routers.pgadmin-dev.tls.certresolver=letsencrypt"
      - "traefik.http.services.pgadmin-dev.loadbalancer.server.port=80"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres_dev

  postgres_staging:
    image: postgres:15.4-alpine
    container_name: postgres_staging
    restart: always
    environment:
      - POSTGRES_DB=zentra-api_staging
      - POSTGRES_USER=zentra-api_admin
      - POSTGRES_PASSWORD=zentra-api_admin_123@#$
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    networks:
      - backend-net

  pgadmin_staging:
    image: dpage/pgadmin4:7.1
    container_name: pgadmin_staging
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@zentra-api.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=80
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=False
      - SCRIPT_NAME=/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin-staging.rule=Host(`staging.pgadmin.badamigroups.com`)"
      - "traefik.http.routers.pgadmin-staging.entrypoints=websecure"
      - "traefik.http.routers.pgadmin-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.pgadmin-staging.loadbalancer.server.port=80"
      - "traefik.http.middlewares.pgadmin-staging-headers.headers.customrequestheaders.X-Script-Name=/"
      - "traefik.http.routers.pgadmin-staging.middlewares=pgadmin-staging-headers,default-chain@file"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres_staging

  postgres_prod:
    image: postgres:15.4-alpine
    container_name: postgres_prod
    restart: always
    environment:
      - POSTGRES_DB=zentra-api_production
      - POSTGRES_USER=zentra-api_admin
      - POSTGRES_PASSWORD=zentra-api_admin_123@#$
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - backend-net

  pgadmin_prod:
    image: dpage/pgadmin4:7.1
    container_name: pgadmin_prod
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@zentra-api.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=True
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_LISTEN_PORT=80
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=False
      - SCRIPT_NAME=/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin-prod.rule=Host(`pgadmin.badamigroups.com`)"
      - "traefik.http.routers.pgadmin-prod.entrypoints=websecure"
      - "traefik.http.routers.pgadmin-prod.tls.certresolver=letsencrypt"
      - "traefik.http.services.pgadmin-prod.loadbalancer.server.port=80"
      - "traefik.http.middlewares.pgadmin-prod-headers.headers.customrequestheaders.X-Script-Name=/"
      - "traefik.http.routers.pgadmin-prod.middlewares=pgadmin-prod-headers,default-chain@file"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres_prod

  # Shared Services
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=zentra-cluster
      - network.host=0.0.0.0
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - traefik-net
      - backend-net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.badamigroups.com`)"
      - "traefik.http.routers.elasticsearch.entrypoints=websecure"
      - "traefik.http.routers.elasticsearch.tls.certresolver=letsencrypt"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    container_name: kibana
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana.badamigroups.com
      - SERVER_PUBLICBASEURL=https://kibana.badamigroups.com
      - SERVER_HOST=0.0.0.0
    depends_on:
      - elasticsearch
    networks:
      - traefik-net
      - backend-net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.kibana.rule=Host(`kibana.badamigroups.com`)"
      - "traefik.http.routers.kibana.entrypoints=websecure"
      - "traefik.http.routers.kibana.tls.certresolver=letsencrypt"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

volumes:
  postgres_dev_data:
  postgres_staging_data:
  postgres_prod_data:
  elasticsearch_data:

networks:
  traefik-net:
    external: true
  backend-net:
    external: true 