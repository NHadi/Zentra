services:
  # Traefik reverse proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    ports:
      - "80:80"      # HTTP - Required for ACME challenge
      - "443:443"    # HTTPS
    command:
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik-net"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.zerossl.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.zerossl.acme.storage=/etc/traefik/acme.json"
      - "--certificatesresolvers.zerossl.acme.httpchallenge=true"
      - "--certificatesresolvers.zerossl.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.zerossl.acme.caserver=https://acme.zerossl.com/v2/DV90"
      - "--certificatesresolvers.zerossl.acme.eab.kid=2YsNtypbR2F8IYffYc6bdQ"
      - "--certificatesresolvers.zerossl.acme.eab.hmacencoded=2x_i41U1jBIAwQ-tp1ghEDxR3tyqZMKj96PNgObPKlzK7k0eOW4_7vyc8ndj-iz4MIzcBY9jMMuvVvt7v2F0zQ"
      - "--log.level=DEBUG"
      - "--accesslog=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${REMOTE_PATH}/traefik/letsencrypt/acme.json:/etc/traefik/acme.json
      - ${REMOTE_PATH}/traefik/logs:/var/log/traefik
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=zerossl"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M

  # Frontend Development
  frontend_dev:
    image: nurulhadii/zentra-ui:dev
    container_name: frontend_dev
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV_DEV}
      - PORT=3000
      - API_URL=https://dev.zentra.${DOMAIN}
      - ESHOP_URL=https://dev.eshop.${DOMAIN}
      - PGADMIN_URL=https://pgadmin.${DOMAIN}
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.frontend-dev.rule=Host(`dev.bisnisqu.${DOMAIN}`)"
      - "traefik.http.routers.frontend-dev.entrypoints=websecure"
      - "traefik.http.routers.frontend-dev.tls.certresolver=zerossl"
      - "traefik.http.services.frontend-dev.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.frontend-dev-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.frontend-dev.middlewares=frontend-dev-headers"
      - "traefik.http.services.frontend-dev.loadbalancer.server.scheme=http"
      - "traefik.http.services.frontend-dev.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.frontend-dev.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 256M

  # E-shop Development
  eshop_dev:
    image: nurulhadii/zentra-eshop:dev
    container_name: eshop_dev
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV_DEV}
      - PORT=3001
      - API_URL=https://dev.zentra.${DOMAIN}
      - ESHOP_URL=https://dev.eshop.${DOMAIN}
      - PGADMIN_URL=https://pgadmin.${DOMAIN}
    expose:
      - "3001"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.eshop-dev.rule=Host(`dev.eshop.${DOMAIN}`)"
      - "traefik.http.routers.eshop-dev.entrypoints=websecure"
      - "traefik.http.routers.eshop-dev.tls.certresolver=zerossl"
      - "traefik.http.services.eshop-dev.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.eshop-dev-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.eshop-dev.middlewares=eshop-dev-headers"
      - "traefik.http.services.eshop-dev.loadbalancer.server.scheme=http"
      - "traefik.http.services.eshop-dev.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.eshop-dev.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 256M

  # Backend Development
  backend_dev:
    image: nurulhadii/zentra-api:dev
    container_name: zentra_backend_dev
    restart: always
    environment:
      - GIN_MODE=debug
      - ENV_MODE=${ENV_MODE_DEV}
      - POSTGRES_HOST=zentra_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB_DEV}
      - POSTGRES_USER=${POSTGRES_USER_DEV}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_DEV}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - ELASTICSEARCH_INDEX_PREFIX=${ELASTICSEARCH_INDEX_PREFIX}
      - JWT_SECRET=${JWT_SECRET_DEV}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET_DEV}
      - SERVER_PORT=8080
      - BACKUP_PATH=/backups
      - ENABLE_PUBLIC_HEALTH=true
    volumes:
      - ${REMOTE_PATH}/uploads:/app/uploads
      - ${REMOTE_PATH}/backups/dev:/backups
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.zentra-dev.rule=Host(`dev.zentra.${DOMAIN}`)"
      - "traefik.http.routers.zentra-dev.entrypoints=websecure"
      - "traefik.http.routers.zentra-dev.tls.certresolver=zerossl"
      - "traefik.http.services.zentra-dev.loadbalancer.server.port=8080"
      - "traefik.http.routers.zentra-dev.service=zentra-dev"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.20'
          memory: 256M

  # Staging Environment
  frontend_staging:
    image: nurulhadii/zentra-ui:staging
    container_name: frontend_staging
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV_STAGING}
      - PORT=3000
      - API_URL=https://staging.zentra.${DOMAIN}
      - ESHOP_URL=https://staging.eshop.${DOMAIN}
      - PGADMIN_URL=https://pgadmin.${DOMAIN}
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.frontend-staging.rule=Host(`staging.bisnisqu.${DOMAIN}`)"
      - "traefik.http.routers.frontend-staging.entrypoints=websecure"
      - "traefik.http.routers.frontend-staging.tls.certresolver=zerossl"
      - "traefik.http.services.frontend-staging.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.frontend-staging-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.frontend-staging.middlewares=frontend-staging-headers"
      - "traefik.http.services.frontend-staging.loadbalancer.server.scheme=http"
      - "traefik.http.services.frontend-staging.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.frontend-staging.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 256M

  eshop_staging:
    image: nurulhadii/zentra-eshop:staging
    container_name: eshop_staging
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV_STAGING}
      - PORT=3001
      - API_URL=https://staging.zentra.${DOMAIN}
      - ESHOP_URL=https://staging.eshop.${DOMAIN}
      - PGADMIN_URL=https://pgadmin.${DOMAIN}
    expose:
      - "3001"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.eshop-staging.rule=Host(`staging.eshop.${DOMAIN}`)"
      - "traefik.http.routers.eshop-staging.entrypoints=websecure"
      - "traefik.http.routers.eshop-staging.tls.certresolver=zerossl"
      - "traefik.http.services.eshop-staging.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.eshop-staging-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.eshop-staging.middlewares=eshop-staging-headers"
      - "traefik.http.services.eshop-staging.loadbalancer.server.scheme=http"
      - "traefik.http.services.eshop-staging.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.eshop-staging.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 256M

  # Backend Staging
  backend_staging:
    image: nurulhadii/zentra-api:staging
    container_name: zentra_backend_staging
    restart: always
    environment:
      - GIN_MODE=release
      - ENV_MODE=${ENV_MODE_STAGING}
      - POSTGRES_HOST=zentra_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB_STAGING}
      - POSTGRES_USER=${POSTGRES_USER_STAGING}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_STAGING}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - ELASTICSEARCH_INDEX_PREFIX=${ELASTICSEARCH_INDEX_PREFIX}
      - JWT_SECRET=${JWT_SECRET_STAGING}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET_STAGING}
      - SERVER_PORT=8080
      - BACKUP_PATH=/backups
      - ENABLE_PUBLIC_HEALTH=true
    volumes:
      - ${REMOTE_PATH}/uploads:/app/uploads
      - ${REMOTE_PATH}/backups/staging:/backups
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.zentra-staging.rule=Host(`staging.zentra.${DOMAIN}`)"
      - "traefik.http.routers.zentra-staging.entrypoints=websecure"
      - "traefik.http.routers.zentra-staging.tls.certresolver=zerossl"
      - "traefik.http.services.zentra-staging.loadbalancer.server.port=8080"
      - "traefik.http.routers.zentra-staging.service=zentra-staging"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.20'
          memory: 256M

  # Production Environment
  frontend_prod:
    image: nurulhadii/zentra-ui:prod
    container_name: frontend_prod
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV_PROD}
      - PORT=3000
      - API_URL=https://zentra.${DOMAIN}
      - ESHOP_URL=https://eshop.${DOMAIN}
      - PGADMIN_URL=https://pgadmin.${DOMAIN}
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.frontend-prod.rule=Host(`bisnisqu.${DOMAIN}`)"
      - "traefik.http.routers.frontend-prod.entrypoints=websecure"
      - "traefik.http.routers.frontend-prod.tls.certresolver=zerossl"
      - "traefik.http.services.frontend-prod.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.frontend-prod-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.frontend-prod.middlewares=frontend-prod-headers"
      - "traefik.http.services.frontend-prod.loadbalancer.server.scheme=http"
      - "traefik.http.services.frontend-prod.loadbalancer.healthcheck.path=/"
      - "traefik.http.services.frontend-prod.loadbalancer.healthcheck.interval=10s"
    networks:
      - traefik-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 768M
        reservations:
          cpus: '0.20'
          memory: 384M

  # E-shop Production
  eshop_prod:
    image: nurulhadii/zentra-eshop:prod
    container_name: eshop_prod
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV_PROD}
      - PORT=3001
      - API_URL=https://zentra.${DOMAIN}
      - ESHOP_URL=https://eshop.${DOMAIN}
      - PGADMIN_URL=https://pgadmin.${DOMAIN}
    expose:
      - "3001"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.eshop.rule=Host(`eshop.${DOMAIN}`)"
      - "traefik.http.routers.eshop.entrypoints=websecure"
      - "traefik.http.routers.eshop.tls.certresolver=zerossl"
      - "traefik.http.services.eshop.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.eshop-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.eshop.middlewares=eshop-headers"
    networks:
      - traefik-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 768M
        reservations:
          cpus: '0.20'
          memory: 384M

  # Backend Production
  backend_prod:
    image: nurulhadii/zentra-api:prod
    container_name: zentra_backend_prod
    restart: always
    environment:
      - GIN_MODE=release
      - ENV_MODE=${ENV_MODE_PROD}
      - POSTGRES_HOST=zentra_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB_PROD}
      - POSTGRES_USER=${POSTGRES_USER_PROD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_PROD}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - ELASTICSEARCH_INDEX_PREFIX=${ELASTICSEARCH_INDEX_PREFIX}
      - JWT_SECRET=${JWT_SECRET_PROD}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET_PROD}
      - SERVER_PORT=8080
      - BACKUP_PATH=/backups
      - ENABLE_PUBLIC_HEALTH=true
    volumes:
      - ${REMOTE_PATH}/uploads:/app/uploads
      - ${REMOTE_PATH}/backups/prod:/backups
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.zentra-prod.rule=Host(`zentra.${DOMAIN}`)"
      - "traefik.http.routers.zentra-prod.entrypoints=websecure"
      - "traefik.http.routers.zentra-prod.tls.certresolver=zerossl"
      - "traefik.http.services.zentra-prod.loadbalancer.server.port=8080"
      - "traefik.http.routers.zentra-prod.service=zentra-prod"
    networks:
      - traefik-net
      - backend-net
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.70'
          memory: 1G
        reservations:
          cpus: '0.30'
          memory: 512M

  # Centralized PostgreSQL
  postgres:
    image: postgres:15.4-alpine
    container_name: zentra_postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER_PROD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_PROD}
      - POSTGRES_DB=${POSTGRES_DB_PROD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_PROD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend-net
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.20'
          memory: 512M
    command:
      - "postgres"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=128MB"
      - "-c"
      - "max_connections=100"

  # Single pgAdmin instance
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_PROXY_X_FOR_COUNT: 1
      PGADMIN_CONFIG_PROXY_X_PROTO_COUNT: 1
      PGADMIN_CONFIG_PROXY_X_PORT_COUNT: 1
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 10
      PGADMIN_CONFIG_FILE_LOG_LEVEL: 10
    ports:
      - "5050:80"
    networks:
      - backend-net
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN}`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=zerossl"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
      - "traefik.http.middlewares.pgadmin-headers.headers.customRequestHeaders.X-Script-Name=/pgadmin"
      - "traefik.http.middlewares.pgadmin-headers.headers.customRequestHeaders.X-Scheme=https"
      - "traefik.http.middlewares.pgadmin-headers.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.pgadmin.middlewares=pgadmin-headers"
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.20'
          memory: 256M
        reservations:
          cpus: '0.10'
          memory: 128M

  # Shared Services
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: zentra_elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - cluster.name=zentra-cluster
      - network.host=0.0.0.0
      - bootstrap.memory_lock=true
      - thread_pool.write.queue_size=100
      - thread_pool.search.queue_size=100
      - indices.queries.cache.size=5%
      - indices.memory.index_buffer_size=10%
      - indices.fielddata.cache.size=10%
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=85%
      - cluster.routing.allocation.disk.watermark.high=90%
      - cluster.routing.allocation.disk.watermark.flood_stage=95%
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 768M
        reservations:
          cpus: '0.4'
          memory: 512M
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - traefik-net
      - backend-net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.${DOMAIN}`)"
      - "traefik.http.routers.elasticsearch.entrypoints=websecure"
      - "traefik.http.routers.elasticsearch.tls.certresolver=zerossl"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    container_name: zentra_kibana
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=none
      - SERVER_NAME=kibana.${DOMAIN}
      - SERVER_PUBLICBASEURL=${KIBANA_SERVER_PUBLICBASEURL}
      - SERVER_HOST=0.0.0.0
      - NODE_OPTIONS="--max-old-space-size=256"
      - TELEMETRY_ENABLED=false
      - MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED=false
      - XPACK_REPORTING_ENABLED=false
      - XPACK_SECURITY_ENABLED=false
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENABLED=false
      - XPACK_TASK_MANAGER_ENABLED=false
      - XPACK_ACTIONS_ENABLED=false
      - XPACK_ALERTING_ENABLED=false
      - XPACK_GRAPH_ENABLED=false
      - XPACK_ML_ENABLED=false
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    depends_on:
      - elasticsearch
    networks:
      - traefik-net
      - backend-net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-net"
      - "traefik.http.routers.kibana.rule=Host(`kibana.${DOMAIN}`)"
      - "traefik.http.routers.kibana.entrypoints=websecure"
      - "traefik.http.routers.kibana.tls.certresolver=zerossl"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    logging:
      options:
        max-size: "10m"
        max-file: "3"


volumes:
  postgres_data:
  elasticsearch_data:

networks:
  traefik-net:
    external: true
  backend-net:
    external: true 